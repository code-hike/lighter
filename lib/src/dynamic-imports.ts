// generated by lib/utils/01.dynamic-imports.mjs

export async function importGrammar(langId: string): Promise<any> {
  switch (langId) {
    case "abap":
      return import("tm-grammars/grammars/abap.json");
    case "actionscript-3":
      return import("tm-grammars/grammars/actionscript-3.json");
    case "ada":
      return import("tm-grammars/grammars/ada.json");
    case "angular-html":
      return import("tm-grammars/grammars/angular-html.json");
    case "angular-ts":
      return import("tm-grammars/grammars/angular-ts.json");
    case "apache":
      return import("tm-grammars/grammars/apache.json");
    case "apex":
      return import("tm-grammars/grammars/apex.json");
    case "apl":
      return import("tm-grammars/grammars/apl.json");
    case "applescript":
      return import("tm-grammars/grammars/applescript.json");
    case "ara":
      return import("tm-grammars/grammars/ara.json");
    case "asciidoc":
      return import("tm-grammars/grammars/asciidoc.json");
    case "asm":
      return import("tm-grammars/grammars/asm.json");
    case "astro":
      return import("tm-grammars/grammars/astro.json");
    case "awk":
      return import("tm-grammars/grammars/awk.json");
    case "ballerina":
      return import("tm-grammars/grammars/ballerina.json");
    case "bat":
      return import("tm-grammars/grammars/bat.json");
    case "beancount":
      return import("tm-grammars/grammars/beancount.json");
    case "berry":
      return import("tm-grammars/grammars/berry.json");
    case "bibtex":
      return import("tm-grammars/grammars/bibtex.json");
    case "bicep":
      return import("tm-grammars/grammars/bicep.json");
    case "blade":
      return import("tm-grammars/grammars/blade.json");
    case "bsl":
      return import("tm-grammars/grammars/bsl.json");
    case "c":
      return import("tm-grammars/grammars/c.json");
    case "cadence":
      return import("tm-grammars/grammars/cadence.json");
    case "cairo":
      return import("tm-grammars/grammars/cairo.json");
    case "clarity":
      return import("tm-grammars/grammars/clarity.json");
    case "clojure":
      return import("tm-grammars/grammars/clojure.json");
    case "cmake":
      return import("tm-grammars/grammars/cmake.json");
    case "cobol":
      return import("tm-grammars/grammars/cobol.json");
    case "codeowners":
      return import("tm-grammars/grammars/codeowners.json");
    case "codeql":
      return import("tm-grammars/grammars/codeql.json");
    case "coffee":
      return import("tm-grammars/grammars/coffee.json");
    case "common-lisp":
      return import("tm-grammars/grammars/common-lisp.json");
    case "coq":
      return import("tm-grammars/grammars/coq.json");
    case "cpp":
      return import("tm-grammars/grammars/cpp.json");
    case "crystal":
      return import("tm-grammars/grammars/crystal.json");
    case "csharp":
      return import("tm-grammars/grammars/csharp.json");
    case "css":
      return import("tm-grammars/grammars/css.json");
    case "csv":
      return import("tm-grammars/grammars/csv.json");
    case "cue":
      return import("tm-grammars/grammars/cue.json");
    case "cypher":
      return import("tm-grammars/grammars/cypher.json");
    case "d":
      return import("tm-grammars/grammars/d.json");
    case "dart":
      return import("tm-grammars/grammars/dart.json");
    case "dax":
      return import("tm-grammars/grammars/dax.json");
    case "desktop":
      return import("tm-grammars/grammars/desktop.json");
    case "diff":
      return import("tm-grammars/grammars/diff.json");
    case "docker":
      return import("tm-grammars/grammars/docker.json");
    case "dotenv":
      return import("tm-grammars/grammars/dotenv.json");
    case "dream-maker":
      return import("tm-grammars/grammars/dream-maker.json");
    case "edge":
      return import("tm-grammars/grammars/edge.json");
    case "elixir":
      return import("tm-grammars/grammars/elixir.json");
    case "elm":
      return import("tm-grammars/grammars/elm.json");
    case "emacs-lisp":
      return import("tm-grammars/grammars/emacs-lisp.json");
    case "erb":
      return import("tm-grammars/grammars/erb.json");
    case "erlang":
      return import("tm-grammars/grammars/erlang.json");
    case "fennel":
      return import("tm-grammars/grammars/fennel.json");
    case "fish":
      return import("tm-grammars/grammars/fish.json");
    case "fluent":
      return import("tm-grammars/grammars/fluent.json");
    case "fortran-fixed-form":
      return import("tm-grammars/grammars/fortran-fixed-form.json");
    case "fortran-free-form":
      return import("tm-grammars/grammars/fortran-free-form.json");
    case "fsharp":
      return import("tm-grammars/grammars/fsharp.json");
    case "gdresource":
      return import("tm-grammars/grammars/gdresource.json");
    case "gdscript":
      return import("tm-grammars/grammars/gdscript.json");
    case "gdshader":
      return import("tm-grammars/grammars/gdshader.json");
    case "genie":
      return import("tm-grammars/grammars/genie.json");
    case "gherkin":
      return import("tm-grammars/grammars/gherkin.json");
    case "git-commit":
      return import("tm-grammars/grammars/git-commit.json");
    case "git-rebase":
      return import("tm-grammars/grammars/git-rebase.json");
    case "gleam":
      return import("tm-grammars/grammars/gleam.json");
    case "glimmer-js":
      return import("tm-grammars/grammars/glimmer-js.json");
    case "glimmer-ts":
      return import("tm-grammars/grammars/glimmer-ts.json");
    case "glsl":
      return import("tm-grammars/grammars/glsl.json");
    case "gnuplot":
      return import("tm-grammars/grammars/gnuplot.json");
    case "go":
      return import("tm-grammars/grammars/go.json");
    case "graphql":
      return import("tm-grammars/grammars/graphql.json");
    case "groovy":
      return import("tm-grammars/grammars/groovy.json");
    case "hack":
      return import("tm-grammars/grammars/hack.json");
    case "haml":
      return import("tm-grammars/grammars/haml.json");
    case "handlebars":
      return import("tm-grammars/grammars/handlebars.json");
    case "haskell":
      return import("tm-grammars/grammars/haskell.json");
    case "haxe":
      return import("tm-grammars/grammars/haxe.json");
    case "hcl":
      return import("tm-grammars/grammars/hcl.json");
    case "hjson":
      return import("tm-grammars/grammars/hjson.json");
    case "hlsl":
      return import("tm-grammars/grammars/hlsl.json");
    case "html":
      return import("tm-grammars/grammars/html.json");
    case "html-derivative":
      return import("tm-grammars/grammars/html-derivative.json");
    case "http":
      return import("tm-grammars/grammars/http.json");
    case "hxml":
      return import("tm-grammars/grammars/hxml.json");
    case "hy":
      return import("tm-grammars/grammars/hy.json");
    case "imba":
      return import("tm-grammars/grammars/imba.json");
    case "ini":
      return import("tm-grammars/grammars/ini.json");
    case "java":
      return import("tm-grammars/grammars/java.json");
    case "javascript":
      return import("tm-grammars/grammars/javascript.json");
    case "jinja":
      return import("tm-grammars/grammars/jinja.json");
    case "jison":
      return import("tm-grammars/grammars/jison.json");
    case "json":
      return import("tm-grammars/grammars/json.json");
    case "json5":
      return import("tm-grammars/grammars/json5.json");
    case "jsonc":
      return import("tm-grammars/grammars/jsonc.json");
    case "jsonl":
      return import("tm-grammars/grammars/jsonl.json");
    case "jsonnet":
      return import("tm-grammars/grammars/jsonnet.json");
    case "jssm":
      return import("tm-grammars/grammars/jssm.json");
    case "jsx":
      return import("tm-grammars/grammars/jsx.json");
    case "julia":
      return import("tm-grammars/grammars/julia.json");
    case "kotlin":
      return import("tm-grammars/grammars/kotlin.json");
    case "kusto":
      return import("tm-grammars/grammars/kusto.json");
    case "latex":
      return import("tm-grammars/grammars/latex.json");
    case "lean":
      return import("tm-grammars/grammars/lean.json");
    case "less":
      return import("tm-grammars/grammars/less.json");
    case "liquid":
      return import("tm-grammars/grammars/liquid.json");
    case "log":
      return import("tm-grammars/grammars/log.json");
    case "logo":
      return import("tm-grammars/grammars/logo.json");
    case "lua":
      return import("tm-grammars/grammars/lua.json");
    case "luau":
      return import("tm-grammars/grammars/luau.json");
    case "make":
      return import("tm-grammars/grammars/make.json");
    case "markdown":
      return import("tm-grammars/grammars/markdown.json");
    case "marko":
      return import("tm-grammars/grammars/marko.json");
    case "matlab":
      return import("tm-grammars/grammars/matlab.json");
    case "mdc":
      return import("tm-grammars/grammars/mdc.json");
    case "mdx":
      return import("tm-grammars/grammars/mdx.json");
    case "mermaid":
      return import("tm-grammars/grammars/mermaid.json");
    case "mipsasm":
      return import("tm-grammars/grammars/mipsasm.json");
    case "mojo":
      return import("tm-grammars/grammars/mojo.json");
    case "move":
      return import("tm-grammars/grammars/move.json");
    case "narrat":
      return import("tm-grammars/grammars/narrat.json");
    case "nextflow":
      return import("tm-grammars/grammars/nextflow.json");
    case "nginx":
      return import("tm-grammars/grammars/nginx.json");
    case "nim":
      return import("tm-grammars/grammars/nim.json");
    case "nix":
      return import("tm-grammars/grammars/nix.json");
    case "nushell":
      return import("tm-grammars/grammars/nushell.json");
    case "objective-c":
      return import("tm-grammars/grammars/objective-c.json");
    case "objective-cpp":
      return import("tm-grammars/grammars/objective-cpp.json");
    case "ocaml":
      return import("tm-grammars/grammars/ocaml.json");
    case "pascal":
      return import("tm-grammars/grammars/pascal.json");
    case "perl":
      return import("tm-grammars/grammars/perl.json");
    case "php":
      return import("tm-grammars/grammars/php.json");
    case "plsql":
      return import("tm-grammars/grammars/plsql.json");
    case "po":
      return import("tm-grammars/grammars/po.json");
    case "postcss":
      return import("tm-grammars/grammars/postcss.json");
    case "powerquery":
      return import("tm-grammars/grammars/powerquery.json");
    case "powershell":
      return import("tm-grammars/grammars/powershell.json");
    case "prisma":
      return import("tm-grammars/grammars/prisma.json");
    case "prolog":
      return import("tm-grammars/grammars/prolog.json");
    case "proto":
      return import("tm-grammars/grammars/proto.json");
    case "pug":
      return import("tm-grammars/grammars/pug.json");
    case "puppet":
      return import("tm-grammars/grammars/puppet.json");
    case "purescript":
      return import("tm-grammars/grammars/purescript.json");
    case "python":
      return import("tm-grammars/grammars/python.json");
    case "qml":
      return import("tm-grammars/grammars/qml.json");
    case "qmldir":
      return import("tm-grammars/grammars/qmldir.json");
    case "qss":
      return import("tm-grammars/grammars/qss.json");
    case "r":
      return import("tm-grammars/grammars/r.json");
    case "racket":
      return import("tm-grammars/grammars/racket.json");
    case "raku":
      return import("tm-grammars/grammars/raku.json");
    case "razor":
      return import("tm-grammars/grammars/razor.json");
    case "reg":
      return import("tm-grammars/grammars/reg.json");
    case "regexp":
      return import("tm-grammars/grammars/regexp.json");
    case "rel":
      return import("tm-grammars/grammars/rel.json");
    case "riscv":
      return import("tm-grammars/grammars/riscv.json");
    case "rst":
      return import("tm-grammars/grammars/rst.json");
    case "ruby":
      return import("tm-grammars/grammars/ruby.json");
    case "rust":
      return import("tm-grammars/grammars/rust.json");
    case "sas":
      return import("tm-grammars/grammars/sas.json");
    case "sass":
      return import("tm-grammars/grammars/sass.json");
    case "scala":
      return import("tm-grammars/grammars/scala.json");
    case "scheme":
      return import("tm-grammars/grammars/scheme.json");
    case "scss":
      return import("tm-grammars/grammars/scss.json");
    case "sdbl":
      return import("tm-grammars/grammars/sdbl.json");
    case "shaderlab":
      return import("tm-grammars/grammars/shaderlab.json");
    case "shellscript":
      return import("tm-grammars/grammars/shellscript.json");
    case "shellsession":
      return import("tm-grammars/grammars/shellsession.json");
    case "smalltalk":
      return import("tm-grammars/grammars/smalltalk.json");
    case "solidity":
      return import("tm-grammars/grammars/solidity.json");
    case "soy":
      return import("tm-grammars/grammars/soy.json");
    case "sparql":
      return import("tm-grammars/grammars/sparql.json");
    case "splunk":
      return import("tm-grammars/grammars/splunk.json");
    case "sql":
      return import("tm-grammars/grammars/sql.json");
    case "ssh-config":
      return import("tm-grammars/grammars/ssh-config.json");
    case "stata":
      return import("tm-grammars/grammars/stata.json");
    case "stylus":
      return import("tm-grammars/grammars/stylus.json");
    case "svelte":
      return import("tm-grammars/grammars/svelte.json");
    case "swift":
      return import("tm-grammars/grammars/swift.json");
    case "system-verilog":
      return import("tm-grammars/grammars/system-verilog.json");
    case "systemd":
      return import("tm-grammars/grammars/systemd.json");
    case "talonscript":
      return import("tm-grammars/grammars/talonscript.json");
    case "tasl":
      return import("tm-grammars/grammars/tasl.json");
    case "tcl":
      return import("tm-grammars/grammars/tcl.json");
    case "templ":
      return import("tm-grammars/grammars/templ.json");
    case "terraform":
      return import("tm-grammars/grammars/terraform.json");
    case "tex":
      return import("tm-grammars/grammars/tex.json");
    case "toml":
      return import("tm-grammars/grammars/toml.json");
    case "ts-tags":
      return import("tm-grammars/grammars/ts-tags.json");
    case "tsv":
      return import("tm-grammars/grammars/tsv.json");
    case "tsx":
      return import("tm-grammars/grammars/tsx.json");
    case "turtle":
      return import("tm-grammars/grammars/turtle.json");
    case "twig":
      return import("tm-grammars/grammars/twig.json");
    case "txt":
      return import("../tm-grammars/txt.json");
    case "typescript":
      return import("tm-grammars/grammars/typescript.json");
    case "typespec":
      return import("tm-grammars/grammars/typespec.json");
    case "typst":
      return import("tm-grammars/grammars/typst.json");
    case "v":
      return import("tm-grammars/grammars/v.json");
    case "vala":
      return import("tm-grammars/grammars/vala.json");
    case "vb":
      return import("tm-grammars/grammars/vb.json");
    case "verilog":
      return import("tm-grammars/grammars/verilog.json");
    case "vhdl":
      return import("tm-grammars/grammars/vhdl.json");
    case "viml":
      return import("tm-grammars/grammars/viml.json");
    case "vue":
      return import("tm-grammars/grammars/vue.json");
    case "vue-html":
      return import("tm-grammars/grammars/vue-html.json");
    case "vyper":
      return import("tm-grammars/grammars/vyper.json");
    case "wasm":
      return import("tm-grammars/grammars/wasm.json");
    case "wenyan":
      return import("tm-grammars/grammars/wenyan.json");
    case "wgsl":
      return import("tm-grammars/grammars/wgsl.json");
    case "wikitext":
      return import("tm-grammars/grammars/wikitext.json");
    case "wolfram":
      return import("tm-grammars/grammars/wolfram.json");
    case "xml":
      return import("tm-grammars/grammars/xml.json");
    case "xsl":
      return import("tm-grammars/grammars/xsl.json");
    case "yaml":
      return import("tm-grammars/grammars/yaml.json");
    case "zenscript":
      return import("tm-grammars/grammars/zenscript.json");
    case "zig":
      return import("tm-grammars/grammars/zig.json");
    default:
      throw new Error("no grammar for " + langId);
  }
}

export async function importTheme(name: string): Promise<any> {
  switch (name) {
    case "dark-plus":
      return import("../themes/dark-plus.json");
    case "dracula-soft":
      return import("../themes/dracula-soft.json");
    case "dracula":
      return import("../themes/dracula.json");
    case "github-dark-dimmed":
      return import("../themes/github-dark-dimmed.json");
    case "github-dark":
      return import("../themes/github-dark.json");
    case "github-from-css":
      return import("../themes/github-from-css.json");
    case "github-light":
      return import("../themes/github-light.json");
    case "light-plus":
      return import("../themes/light-plus.json");
    case "material-darker":
      return import("../themes/material-darker.json");
    case "material-default":
      return import("../themes/material-default.json");
    case "material-from-css":
      return import("../themes/material-from-css.json");
    case "material-lighter":
      return import("../themes/material-lighter.json");
    case "material-ocean":
      return import("../themes/material-ocean.json");
    case "material-palenight":
      return import("../themes/material-palenight.json");
    case "min-dark":
      return import("../themes/min-dark.json");
    case "min-light":
      return import("../themes/min-light.json");
    case "monokai":
      return import("../themes/monokai.json");
    case "nord":
      return import("../themes/nord.json");
    case "one-dark-pro":
      return import("../themes/one-dark-pro.json");
    case "poimandres":
      return import("../themes/poimandres.json");
    case "rose-pine-dawn":
      return import("../themes/rose-pine-dawn.json");
    case "rose-pine-moon":
      return import("../themes/rose-pine-moon.json");
    case "rose-pine":
      return import("../themes/rose-pine.json");
    case "slack-dark":
      return import("../themes/slack-dark.json");
    case "slack-ochin":
      return import("../themes/slack-ochin.json");
    case "solarized-dark":
      return import("../themes/solarized-dark.json");
    case "solarized-light":
      return import("../themes/solarized-light.json");
    default:
      throw new Error("no theme for " + name);
  }
}
